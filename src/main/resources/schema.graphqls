type Query {
  """
  Query transactions, optionally filtering by start date, end date, and category.
  """
  transactions(timePeriod: TimePeriodInput, category: String): [Transaction!]

  """
  List all categories.
  """
  categories: [Category!]

  """
  List all bank accounts.
  """
  accounts: [Account!]

  """
  Calculate the savings rate (% of income that is saved/invested) for a particular time period.
  """
  savingsRate(timePeriod: TimePeriodInput): Float
}

input TimePeriodInput {
  """
  Start date for the time period (inclusive).
  """
  startDate: String
  """
  End date for the time period (inclusive).
  """
  endDate: String
}

type Transaction {
  """
  Opaque identifier.
  """
  id: ID!,

  """
  Date the transaction occured on (including timezone offset).

  TODO: Specify exact format.
  """
  date: String!

  """
  Description of the transaction, as per the bank record.
  """
  description: String!

  """
  Dollar amount of the transaction.

  Positive values for money coming in, negative values for money going out.
  """
  amount: Float!

  """
  Account the transaction occured in (e.g. "Savings").
  """
  account: Account

  """
  Category the transaction falls into (`null` if the transaction has not been categorised).
  """
  category: Category
}

type Category {
  """
  Opaque identifier.
  """
  id: ID!,

  """
  Category name, e.g. "Transport".
  """
  name: String!
}

type Account {
  """
  Opaque identifier.
  """
  id: ID!,

  """
  Name of the account, e.g. "Savings".
  """
  name: String!
}

type Mutation {
  """
  Create an account that transactions occur in.
  """
  createAccount(input: CreateAccountInput!): CreateAccountResponse

  """
  Create a category that transactions can be organised into.
  """
  createCategory(input: CreateCategoryInput!): CreateCategoryResponse

  """
  Record a series of transactions.

  Transactions that have already been recorded will be ignored.
  """
  recordTransactions(input: RecordTransactionsInput!): RecordTransactionsResponse
}

interface MutationResponse {
  """
  True of the mutation succeeded, false if it failed.
  """
  success: Boolean!

  """
  A human-readable message to assist with debugging.
  """
  message: String!

  """
  A machine-readable enum to allow frontends to disambiguate different types of errors.
  """
  errorType: String
}

input CreateAccountInput {
  """
  Account identifier, as specified by the bank.
  """
  id: ID!

  """
  Name of the account, e.g. "Savings".
  """
  name: String!
}

type CreateAccountResponse implements MutationResponse {
  success: Boolean!
  message: String!
  errorType: String

  """
  The created account.
  """
  account: Account
}

input CreateCategoryInput {
  """
  Category name, e.g. "Transport".
  """
  name: String!
}

type CreateCategoryResponse implements MutationResponse {
  success: Boolean!
  message: String!
  errorType: String

  """
  The created category.
  """
  category: Category
}

input RecordTransactionsInput {
  """
  CSV transaction record (ING format).
  """
  csv: String!
}

type RecordTransactionsResponse implements MutationResponse{
  success: Boolean!
  message: String!
  errorType: String

  """
  List of transactions (including the newly created ones, if they fall within the requested interval).
  """
  transactions(timePeriod: TimePeriodInput, category: String): [Transaction!]
}
